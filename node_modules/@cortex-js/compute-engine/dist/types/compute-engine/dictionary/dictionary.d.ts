/* 0.4.2 */import type { DictionaryCategory } from '../../public';
import type { Dictionary, CompiledDictionary, ComputeEngine, Numeric } from '../public';
export declare function getDefaultDictionaries<T extends number = number>(categories?: DictionaryCategory[] | 'all'): Readonly<Dictionary<T>>[];
export declare const DICTIONARY: {
    [category in DictionaryCategory]?: Dictionary<Numeric>;
};
/**
 * Return a compiled and validated version of the dictionary.
 *
 * Specifically:
 * - Expressions (for values, evaluate, domain, isElementOf, etc..) are compiled
 * when possible, put in canonical form otherwise
 * - The domain of entries is inferred and validated:
 *  - check that domains are in canonical form
 *  - check that domains are consistent with declarations (for example that
 * the signature of predicate have a "MaybeBoolean" codomain)
 *
 */
export declare function compileDictionary<T extends number = Numeric>(dict: Dictionary<T>, engine: ComputeEngine<T>): CompiledDictionary<T>;
