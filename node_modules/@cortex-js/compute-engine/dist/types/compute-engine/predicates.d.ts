/* 0.4.2 */import { Expression } from '../public';
import { ComputeEngine, Domain } from './public';
export declare function isInteger(ce: ComputeEngine, expr: Expression): boolean;
export declare function isNumeric(_ce: ComputeEngine, _expr: Expression | null): boolean | undefined;
export declare function isZero(ce: ComputeEngine, expr: Expression): boolean | undefined;
export declare function isNotZero(engine: ComputeEngine, expr: Expression): boolean | undefined;
export declare function isInfinity(ce: ComputeEngine, expr: Expression | null): boolean | undefined;
export declare function isFinite(_ce: ComputeEngine, _expr: Expression | null): boolean | undefined;
export declare function isPosInfinity(ce: ComputeEngine, expr: Expression | null): boolean | undefined;
export declare function isNegInfinity(ce: ComputeEngine, expr: Expression | null): boolean | undefined;
export declare function isPositive(ce: ComputeEngine, expr: Expression | null): boolean | undefined;
export declare function isOne(ce: ComputeEngine, expr: Expression): boolean | undefined;
export declare function isNegativeOne(ce: ComputeEngine, expr: Expression): boolean | undefined;
/** Is `expr` >= 0? */
export declare function isNonNegative(ce: ComputeEngine, expr: Expression): boolean | undefined;
/** Is `expr` < 0? */
export declare function isNegative(ce: ComputeEngine, expr: Expression): boolean | undefined;
/** Is `expr` <= 0? */
export declare function isNonPositive(ce: ComputeEngine, expr: Expression): boolean | undefined;
export declare function isReal(_ce: ComputeEngine, expr: Expression | null): boolean | undefined;
/** Is `expr` an element of RR, including ±∞? */
export declare function isExtendedReal(_ce: ComputeEngine, _expr: Expression): boolean | undefined;
/** Is `expr` an element of QQ (can be written as p/q)? */
export declare function isRational(_ce: ComputeEngine, _expr: Expression): boolean | undefined;
/** Is `expr` an algebraic number, i.e. not transcendental (π, e)? */
export declare function isAlgebraic(_ce: ComputeEngine, _expr: Expression): boolean | undefined;
/** Is `expr` a complex number? */
export declare function isComplex(_ce: ComputeEngine, _expr: Expression): boolean | undefined;
/** Is `expr` an element of `dom`? */
export declare function isElement(_ce: ComputeEngine, _expr: Expression, _set: Expression): boolean | undefined;
/** Test if `lhs` is a subset of `rhs`.
 *
 * `lhs` and `rhs` can be set expressions, i.e.
 * `["SetMinus", "ComplexNumber", 0]`
 *
 */
export declare function isSubsetOf(ce: ComputeEngine, lhs: Domain | null, rhs: Domain | null): boolean;
export declare function isEqual(_ce: ComputeEngine, _lhs: Expression, _rhs: Expression): boolean | undefined;
export declare function isLess(_ce: ComputeEngine, _lhs: Expression, _rhs: Expression): boolean | undefined;
export declare function isLessEqual(_ce: ComputeEngine, _lhs: Expression, _rhs: Expression): boolean | undefined;
export declare function isGreater(_ce: ComputeEngine, _lhs: Expression, _rhs: Expression): boolean | undefined;
export declare function isGreaterEqual(_ce: ComputeEngine, _lhs: Expression, _rhs: Expression): boolean | undefined;
