/* 0.4.2 */import type { Expression } from '../public';
export declare class ExpressionMap<T extends number, U> {
    readonly _items: Map<Expression<T>, U>;
    constructor(source?: ExpressionMap<T, U> | Iterable<[T, U]>);
    has(expr: Expression<T>): boolean;
    get(expr: Expression<T>): U | undefined;
    set(expr: Expression<T>, value: U): void;
    delete(expr: Expression<T>): void;
    [Symbol.iterator](): IterableIterator<[Expression<T>, U]>;
    entries(): IterableIterator<[Expression<T>, U]>;
}
