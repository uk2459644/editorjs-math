/* 0.4.2 */import { ExpressionX } from '../common/utils';
import { Expression } from '../public';
import { Numeric } from './public';
export declare type Substitution<T extends number = number> = {
    [symbol: string]: Expression<T>;
};
export declare function matchRecursive(expr: ExpressionX, pattern: ExpressionX, substitution: Substitution<Numeric>, options: {
    numericalTolerance: number;
}): Substitution<Numeric> | null;
export declare function match<T extends number = number>(pattern: Expression<T>, expr: Expression<T>, options?: {
    numericalTolerance: number;
}): Substitution<T> | null;
export declare function match1(expr: Expression, pattern: Expression, options: {
    numericalTolerance: number;
}): Expression | null;
export declare function count(exprs: Iterable<Expression>, pattern: Expression, options: {
    numericalTolerance: number;
}): number;
export declare function matchList(exprs: Iterable<Expression>, pattern: Expression, options: {
    numericalTolerance: number;
}): Substitution[];
export declare function substitute<T extends number = Numeric>(expr: Expression<T>, substitution: Substitution<T>): Expression<T>;
