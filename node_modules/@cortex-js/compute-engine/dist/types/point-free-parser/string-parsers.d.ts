/* 0.4.2 */import { Parser, Result } from './parsers';
/** Parse an escape sequence such as `\n` or `\u0041`*/
export declare function parseEscapeSequence(parser: Parser): Result<string>;
/** A key string is a sequence of non-White_Space, non-Syntax characters */
export declare function parseKeyString(parser: Parser): Result<string>;
/** An extended string is surrounded by `###"..."###` or `#"..."#` and
 * contains no escape sequence. Convenient for strings that contain lots
 * of characters that would otherwise need to be escaped: quotation marks,
 * backslash, etc...
 *
 */
export declare function parseExtendedString(parser: Parser): Result<string>;
/** At the `\` of a `\(...)` expression */
export declare function parseInterpolation<IR>(parser: Parser, expression?: string | ((parser: Parser) => Result<IR>)): Result<IR>;
/** A single line string is surrounded by quotation mark and may include escape sequences.
 *
 * @param expression - a function that parses an expression inside a `\()` escape sequence
 *
 */
export declare function parseSingleLineString<T>(parser: Parser, expression?: string | ((parser: Parser) => Result<T>)): Result<(string | T)[]>;
/**
 * A multiline line string begins and end with a triple quotation mark """
 * It can span multiple lines and contain escape sequences.
 *
 * @param expression - a function that parses an expresion inside a `\()`
 * escape sequence
 *
 */
export declare function parseMultilineString<T>(parser: Parser, expression: string): Result<(string | T)[]>;
