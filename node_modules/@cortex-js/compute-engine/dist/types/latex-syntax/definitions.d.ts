/* 0.4.2 */import { DictionaryCategory, Expression, ErrorCode, ErrorListener } from '../public';
import { LatexDictionary, LatexString, LatexToken, ParserFunction, SerializerFunction, LatexDictionaryEntry } from './public';
import { Numeric } from '../compute-engine/public';
export declare type IndexedLatexDictionaryEntry<T extends number = number> = {
    name: string;
    trigger?: {
        symbol?: LatexToken | LatexToken[];
        matchfix?: LatexToken | LatexToken[];
        infix?: LatexToken | LatexToken[];
        prefix?: LatexToken | LatexToken[];
        postfix?: LatexToken | LatexToken[];
        superfix?: LatexToken | LatexToken[];
        subfix?: LatexToken | LatexToken[];
    };
    parse: Expression<T> | ParserFunction<T>;
    serialize: SerializerFunction<T> | LatexString;
    associativity: 'right' | 'left' | 'non' | 'both';
    precedence: number;
    arguments: 'group' | 'implicit' | '';
    optionalLatexArg: number;
    requiredLatexArg: number;
    separator: LatexString;
    closeFence: LatexString;
};
export declare type IndexedLatexDictionary<T extends number = number> = {
    lookahead: number;
    name: Map<string, IndexedLatexDictionaryEntry<T>>;
    prefix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    infix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    postfix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    matchfix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    superfix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    subfix: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    symbol: (Map<LatexString, IndexedLatexDictionaryEntry<T>> | null)[];
    environment: Map<string, IndexedLatexDictionaryEntry<T>>;
};
export declare function indexLatexDictionary<T extends number = number>(dic: readonly LatexDictionaryEntry<T>[], onError: ErrorListener<ErrorCode>): IndexedLatexDictionary<T>;
export declare const DEFAULT_LATEX_DICTIONARY: {
    [category in DictionaryCategory]?: LatexDictionary<Numeric>;
};
