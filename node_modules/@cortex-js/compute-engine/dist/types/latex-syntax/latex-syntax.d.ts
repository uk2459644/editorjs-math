/* 0.4.2 */import { ParseLatexOptions, SerializeLatexOptions, LatexDictionaryEntry, LatexDictionary, LatexString, NumberFormattingOptions } from './public';
import { DictionaryCategory, Expression, ErrorCode, ErrorListener } from '../public';
import { Numeric } from '../compute-engine/public';
export declare class LatexSyntax<T extends number = number> {
    onError: ErrorListener<ErrorCode>;
    options: Required<NumberFormattingOptions> & Required<ParseLatexOptions> & Required<SerializeLatexOptions>;
    private dictionary;
    constructor(options?: NumberFormattingOptions & ParseLatexOptions & SerializeLatexOptions & {
        dictionary?: readonly LatexDictionaryEntry<T>[];
        onError?: ErrorListener<ErrorCode>;
    });
    static getDictionary(domain?: DictionaryCategory | 'all'): Readonly<LatexDictionary<any>>;
    parse(latex: LatexString): Expression;
    serialize(expr: Expression<T>): LatexString;
}
export declare function parse<T extends number = Numeric>(latex: LatexString, options?: NumberFormattingOptions & ParseLatexOptions & {
    dictionary?: Readonly<LatexDictionary<T>>;
    onError?: ErrorListener<ErrorCode>;
}): Expression;
/**
 * Serialize a MathJSON expression as a Latex string.
 *
 */
export declare function serialize<T extends number = number>(expr: Expression<T>, options?: NumberFormattingOptions & SerializeLatexOptions & {
    dictionary?: Readonly<LatexDictionary<T>>;
    onError?: ErrorListener<ErrorCode>;
}): LatexString;
